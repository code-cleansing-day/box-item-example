{
  type 상품타입 = {
    가격: number;
    이름: string;
  };

  type 박스타입 = {
    내용?: 박스타입[] | 상품타입[];
  } & 상품타입;

  interface 박스명세 {
    포장하기: (...내용물들: 박스타입[] | 상품타입[]) => void;
    총가격구해오기: () => string;
  }

  class 상품 {
    가격: 상품타입['가격'];
    이름: 상품타입['이름'];
    constructor(가격: 상품타입['가격'], 이름: 상품타입['이름']) {
      this.가격 = 가격;
      this.이름 = 이름;
    }
  }

  class 박스 extends 상품 implements 박스명세 {
    내용: 박스타입['내용'] = [];
    constructor(이름: 박스타입['이름']) {
      super(100, 이름 + '_박스');
    }
    포장하기(...내용물들: 박스타입[] | 상품타입[]) {
      if (this.내용) {
        this.내용 = [...내용물들];
      }
    }
    총가격구해오기() {
      // FIXME:
      let 총가격 = this.가격;

      function 가격구하기(박스: 박스타입) {
        총가격 += 박스.가격;

        if (박스.내용 && Array.isArray(박스.내용)) {
          박스.내용.forEach(가격구하기);
        }
      }

      if (this.내용) {
        this.내용.forEach(가격구하기);
      }

      return 총가격.toLocaleString() + '원';
    }
  }

  const 망치 = new 상품(10000, '망치');
  const 휴대폰 = new 상품(1000000, '휴대폰');
  const 헤드폰 = new 상품(400000, '헤드폰');
  const 충천기 = new 상품(25000, '충천기');
  const 영수증 = new 상품(200, '영수증');

  const 박스_휴대폰_헤드폰 = new 박스('휴대폰_헤드폰');
  박스_휴대폰_헤드폰.포장하기(휴대폰, 헤드폰);

  const 박스_충전기 = new 박스('충전기');
  박스_충전기.포장하기(충천기);

  const 박스_충전기_핸드폰_헤드폰 = new 박스('충전기_핸드폰_헤드폰');
  박스_충전기_핸드폰_헤드폰.포장하기(박스_휴대폰_헤드폰, 박스_충전기);

  const 박스_망치 = new 박스('망치');
  박스_망치.포장하기(망치);

  const 박스_총주문 = new 박스('총 주문');
  박스_총주문.포장하기(박스_망치, 박스_충전기_핸드폰_헤드폰, 영수증);

  console.log(박스_총주문);
  console.log(박스_총주문.총가격구해오기());
}
